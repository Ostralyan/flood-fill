{"version":3,"sources":["Square.jsx","Board.jsx","Game.jsx","index.js"],"names":["Square","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","nextProps","color","_this2","divStyle","backgroundColor","height","widthOfSquare","width","lineHeight","react_default","a","createElement","className","style","onClick","React","Component","Board","i","j","oldColor","squares","newColor","getUniqueRandomColor","slice","floodFillHelper","clearVisisted","setState","squaresPerRow","visited","floodFillRecursiveHelper","stack","length","squareCoordinates","pop","newI","newJ","nextSquare","Array","prototype","push","apply","floodFillIterativeHelper","numberBetweenZeroAndFour","Math","floor","random","numberOfColors","colors","Square_Square","floodFillIterative","key","table","children","renderSquare","createTable","Game","generateColors","generateSquares","handleChange","bind","assertThisInitialized","handleSubmit","event","defineProperty","target","name","value","newState","preventDefault","toString","getColor","onSubmit","type","onChange","href","rel","Board_Board","ReactDOM","render","Game_Game","document","getElementById"],"mappings":"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","file":"static/js/main.5bbcc520.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Square extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  shouldComponentUpdate(nextProps) {\n    if (nextProps.color !== this.props.color) {\n      return true;\n    }\n\n    return false;\n  }\n\n  render() {\n    const divStyle = {\n      backgroundColor: this.props.color,\n      height: this.props.widthOfSquare + \"px\",\n      width: this.props.widthOfSquare + \"px\",\n      lineHeight: this.props.widthOfSquare + \"px\",\n    }\n    return (\n      <button\n        className=\"square\"\n        style={divStyle}\n        onClick={() => this.props.onClick()}>\n      </button>\n    );\n  }\n}","import React from 'react';\nimport Square from './Square';\n\nexport default class Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  floodFillRecursive(i, j) {\n    const oldColor = this.props.squares[i][j].color;\n    const newColor = this.getUniqueRandomColor(oldColor);\n    const squares = this.props.squares.slice();\n\n    this.floodFillHelper(squares, i, j, oldColor, newColor);\n    this.clearVisisted(squares);\n    this.setState({ squares: squares });\n  }\n\n  floodFillRecursiveHelper(squares, i, j, oldColor, newColor) {\n    // check out of bounds\n    if (i < 0 || i > this.props.squaresPerRow - 1) return;\n    if (j < 0 || j > this.props.squaresPerRow - 1) return;\n    // check if it's visited\n    if (squares[i][j].visited) return;\n    // Indicate node has been visited\n    squares[i][j].visited = true;\n    // check if it's same color\n    if (squares[i][j].color !== oldColor) return;\n    // set the current color to the new color and mark node as visited.\n    squares[i][j].color = newColor;\n    // recurse through up, down, left, right boxes.\n    this.floodFillRecursiveHelper(squares, i + 1, j, oldColor, newColor);\n    this.floodFillRecursiveHelper(squares, i - 1, j, oldColor, newColor);\n    this.floodFillRecursiveHelper(squares, i, j + 1, oldColor, newColor);\n    this.floodFillRecursiveHelper(squares, i, j - 1, oldColor, newColor);\n  }\n\n  floodFillIterative(i, j) {\n    const oldColor = this.props.squares[i][j].color;\n    const newColor = this.getUniqueRandomColor(oldColor);\n    const squares = this.props.squares.slice();\n\n    const stack = [\n      [i, j]\n    ];\n    while (stack.length) {\n      const squareCoordinates = stack.pop();\n      let newI = squareCoordinates[0];\n      let newJ = squareCoordinates[1];\n\n      if (newI < 0 || newI >= this.props.squaresPerRow) continue;\n      if (newJ < 0 || newJ >= this.props.squaresPerRow) continue;\n      let nextSquare = squares[newI][newJ];\n\n      if (nextSquare.color !== oldColor) continue;\n      if (nextSquare.visited) continue;\n\n      Array.prototype.push.apply(stack, this.floodFillIterativeHelper(newI, newJ));\n      nextSquare.visited = true;\n      nextSquare.color = newColor;\n    }\n    this.setState({ squares });\n    this.clearVisisted(squares);\n\n  }\n\n  floodFillIterativeHelper(i, j) {\n    return [\n      [i - 1, j],\n      [i + 1, j],\n      [i, j - 1],\n      [i, j + 1],\n\n      [i - 1, j + 1],\n      [i + 1, j + 1],\n      [i - 1, j - 1],\n      [i + 1, j - 1],\n    ]\n  }\n\n  getUniqueRandomColor(color) {\n    const numberBetweenZeroAndFour = Math.floor((Math.random() * this.props.numberOfColors));\n    if (color === this.props.colors[numberBetweenZeroAndFour]) {\n      return this.getUniqueRandomColor(color);\n    } else {\n      return this.props.colors[numberBetweenZeroAndFour];\n    }\n  }\n\n  clearVisisted(squares) {\n    for (let i = 0; i < squares.length; i++) {\n      for (let j = 0; j < squares[i].length; j++) {\n        squares[i][j].visited = false;\n      }\n    }\n  }\n\n  renderSquare(i, j) {\n    return <Square\n      color={this.props.squares[i][j].color}\n      onClick={() => this.floodFillIterative(i, j)}\n      widthOfSquare={this.props.widthOfSquare}\n      key={i + \",\" + j}\n    />;\n  }\n\n  createTable() {\n    let table = []\n    \n    for (let i = 0; i < this.props.squaresPerRow; i++) {\n      let children = []\n      // Inner loop to create children\n      for (let j = 0; j < this.props.squaresPerRow; j++) {\n        children.push(this.renderSquare(i, j))\n      }\n      // Create the parent and add the children\n      table.push(<div className=\"board-row\" key={i}>{children}</div>)\n    }\n    return table\n  }\n\n  render() {\n    return (\n      <div>\n        {this.createTable()}\n      </div>\n    );\n  }\n}","import React from 'react';\nimport Board from './Board';\n\nexport default class Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.state.widthOfSquare = 1;\n    this.state.squaresPerRow = 300;\n    this.state.numberOfColors = 3;\n\n    this.state.colors = this.generateColors();\n    this.state.squares = this.generateSquares();\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({[event.target.name]: event.target.value });\n  }\n\n  handleSubmit(event) {\n    const newState = {\n      squares: this.generateSquares(),\n      colors: this.generateColors()\n    }\n    this.setState(newState);\n    event.preventDefault();\n  }\n\n  generateColors() {\n    const colors = [];\n    for (let i = 0; i < this.state.numberOfColors; i++) {\n      colors[i] = '#' + (Math.random() * 0xFFFFFF << 0).toString(16);\n    }\n    return colors;\n  }\n\n  generateSquares() {\n    const squares = []\n    for(let i = 0; i < this.state.squaresPerRow; i++) {\n      squares[i] = [];\n      for(let j = 0; j < this.state.squaresPerRow; j++) {\n        squares[i][j] = {\n          color: this.getColor(),\n          visited: false\n        }\n      }\n    }\n    return squares;\n  }\n\n  getColor() {\n    const numberBetweenZeroAndFour = Math.floor((Math.random() * this.state.numberOfColors));\n    return this.state.colors[numberBetweenZeroAndFour];\n  }\n\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <form onSubmit={this.handleSubmit}>\n            <label>\n              Width of square:\n              <input type=\"number\" name=\"widthOfSquare\" value={this.state.widthOfSquare} onChange={this.handleChange} />\n            </label>\n            <br></br>\n            <label>\n              Squares per row:\n              <input type=\"number\" name=\"squaresPerRow\" value={this.state.squaresPerRow} onChange={this.handleChange} />\n            </label>\n            <br></br>\n            <label>\n              Number of colors:\n              <input type=\"number\" name=\"numberOfColors\" value={this.state.numberOfColors} onChange={this.handleChange} />\n            </label>\n            <br></br>\n            <input type=\"submit\" value=\"Reset\" /> (Work In Progress)\n          </form>\n          <p>\n            Instructions: Click on any square.<br></br>\n            <a href=\"https://github.com/ostralyan/flood-fill\" target=\"_blank\" rel=\"noopener noreferrer\">Written by Luke Xu.</a>\n          </p>\n          <Board \n            widthOfSquare={this.state.widthOfSquare}\n            squaresPerRow={this.state.squaresPerRow}\n            numberOfColors={this.state.numberOfColors}\n            squares={this.state.squares}\n            colors={this.state.colors}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport Game from './Game';\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}