{"version":3,"sources":["Square.jsx","Board.jsx","Game.jsx","index.js"],"names":["Square","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inherits","createClass","key","value","_this2","divStyle","backgroundColor","color","height","widthOfSquare","width","lineHeight","react_default","a","createElement","className","style","onClick","React","Component","Board","i","j","oldColor","squares","newColor","getUniqueRandomColor","slice","getNextFloodFillState","clearVisisted","setState","numberBetweenZeroAndFour","Math","floor","random","numberOfColors","colors","length","visited","squaresPerRow","Square_Square","floodFill","table","children","push","renderSquare","createTable","Game","generateColors","generateSquares","handleChange","bind","assertThisInitialized","handleSubmit","event","defineProperty","target","name","newState","preventDefault","toString","getColor","onSubmit","type","onChange","href","Board_Board","ReactDOM","render","Game_Game","document","getElementById"],"mappings":"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","file":"static/js/main.7ccb9666.chunk.js","sourcesContent":["import React from 'react';\n\nexport class Square extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const divStyle = {\n      backgroundColor: this.props.color,\n      height: this.props.widthOfSquare + \"px\",\n      width: this.props.widthOfSquare + \"px\",\n      lineHeight: this.props.widthOfSquare + \"px\",\n    }\n    return (\n      <button\n        className=\"square\"\n        style={divStyle}\n        onClick={() => this.props.onClick()}>\n      </button>\n    );\n  }\n}","import React from 'react';\nimport { Square } from './Square.jsx';\n\nexport class Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  floodFill(i, j) {\n    const oldColor = this.props.squares[i][j].color;\n    const newColor = this.getUniqueRandomColor(oldColor);\n    const squares = this.props.squares.slice();\n\n    this.getNextFloodFillState(squares, i, j, oldColor, newColor);\n    this.clearVisisted(squares);\n    this.setState({ squares: squares });\n  }\n\n  getUniqueRandomColor(color) {\n    const numberBetweenZeroAndFour = Math.floor((Math.random() * this.props.numberOfColors));\n    if (color === this.props.colors[numberBetweenZeroAndFour]) {\n      return this.getUniqueRandomColor(color);\n    } else {\n      return this.props.colors[numberBetweenZeroAndFour];\n    }\n  }\n\n  clearVisisted(squares) {\n    for (let i = 0; i < squares.length; i++) {\n      for (let j = 0; j < squares[i].length; j++) {\n        squares[i][j].visited = false;\n      }\n    }\n  }\n\n  getNextFloodFillState(squares, i, j, oldColor, newColor) {\n    // check out of bounds\n    if (i < 0 || i > this.props.squaresPerRow - 1) return;\n    if (j < 0 || j > this.props.squaresPerRow - 1) return;\n    // check if it's visited\n    if (squares[i][j].visited) return;\n    // Indicate node has been visited\n    squares[i][j].visited = true;\n    // check if it's same color\n    if (squares[i][j].color !== oldColor) return;\n    // set the current color to the new color and mark node as visited.\n    squares[i][j].color = newColor;\n    // recurse through up, down, left, right boxes.\n    this.getNextFloodFillState(squares, i + 1, j, oldColor, newColor);\n    this.getNextFloodFillState(squares, i - 1, j, oldColor, newColor);\n    this.getNextFloodFillState(squares, i, j + 1, oldColor, newColor);\n    this.getNextFloodFillState(squares, i, j - 1, oldColor, newColor);\n  }\n\n  renderSquare(i, j) {\n    return <Square\n      color={this.props.squares[i][j].color}\n      onClick={() => this.floodFill(i, j)}\n      widthOfSquare={this.props.widthOfSquare}\n      key={i + \",\" + j}\n    />;\n  }\n\n  createTable() {\n    let table = []\n    \n    for (let i = 0; i < this.props.squaresPerRow; i++) {\n      let children = []\n      //Inner loop to create children\n      for (let j = 0; j < this.props.squaresPerRow; j++) {\n        children.push(this.renderSquare(i, j))\n      }\n      //Create the parent and add the children\n      table.push(<div className=\"board-row\" key={i}>{children}</div>)\n    }\n    return table\n  }\n\n  render() {\n    return (\n      <div>\n        {this.createTable()}\n      </div>\n    );\n  }\n}","import React from 'react';\nimport { Board } from './Board.jsx';\n\nexport class Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.state.widthOfSquare = 10;\n    this.state.squaresPerRow = 100;\n    this.state.numberOfColors = 2;\n\n    this.state.colors = this.generateColors();\n    this.state.squares = this.generateSquares();\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({[event.target.name]: event.target.value });\n  }\n\n  handleSubmit(event) {\n    const newState = {\n      squares: this.generateSquares(),\n      colors: this.generateColors()\n    }\n    this.setState(newState);\n    event.preventDefault();\n  }\n\n  generateColors() {\n    const colors = [];\n    for (let i = 0; i < this.state.numberOfColors; i++) {\n      colors[i] = '#' + (Math.random() * 0xFFFFFF << 0).toString(16);\n    }\n    return colors;\n  }\n\n  generateSquares() {\n    const squares = []\n    for(let i = 0; i < this.state.squaresPerRow; i++) {\n      squares[i] = [];\n      for(let j = 0; j < this.state.squaresPerRow; j++) {\n        squares[i][j] = {\n          color: this.getColor(),\n          visited: false\n        }\n      }\n    }\n    return squares;\n  }\n\n  getColor() {\n    const numberBetweenZeroAndFour = Math.floor((Math.random() * this.state.numberOfColors));\n    return this.state.colors[numberBetweenZeroAndFour];\n  }\n\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <form onSubmit={this.handleSubmit}>\n            <label>\n              Width of square:\n              <input type=\"number\" name=\"widthOfSquare\" value={this.state.widthOfSquare} onChange={this.handleChange} />\n            </label>\n            <br></br>\n            <label>\n              Squares per row:\n              <input type=\"number\" name=\"squaresPerRow\" value={this.state.squaresPerRow} onChange={this.handleChange} />\n            </label>\n            <br></br>\n            <label>\n              Number of colors:\n              <input type=\"number\" name=\"numberOfColors\" value={this.state.numberOfColors} onChange={this.handleChange} />\n            </label>\n            <br></br>\n            <input type=\"submit\" value=\"Reset\" />\n          </form>\n          <p>\n            Instructions: Click on any square.<br></br>\n            <a href=\"https://github.com/ostralyan/flood-fill\" target=\"_blank\">Written by Luke Xu.</a>\n          </p>\n          <Board \n            widthOfSquare={this.state.widthOfSquare}\n            squaresPerRow={this.state.squaresPerRow}\n            numberOfColors={this.state.numberOfColors}\n            squares={this.state.squares}\n            colors={this.state.colors}\n          />\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport { Game } from './Game.jsx';\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}