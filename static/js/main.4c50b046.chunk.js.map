{"version":3,"sources":["Square.jsx","Board.jsx","Game.jsx","index.js"],"names":["Square","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","nextProps","color","_this2","divStyle","backgroundColor","height","widthOfSquare","width","lineHeight","react_default","a","createElement","className","style","onClick","React","Component","Board","i","j","oldColor","squares","newColor","getUniqueRandomColor","slice","getNextFloodFillState","clearVisisted","setState","numberBetweenZeroAndFour","Math","floor","random","numberOfColors","colors","length","visited","squaresPerRow","Square_Square","floodFill","key","table","children","push","renderSquare","createTable","Game","generateColors","generateSquares","handleChange","bind","assertThisInitialized","handleSubmit","event","defineProperty","target","name","value","newState","preventDefault","toString","getColor","onSubmit","type","onChange","href","rel","Board_Board","ReactDOM","render","Game_Game","document","getElementById"],"mappings":"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","file":"static/js/main.4c50b046.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Square extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  shouldComponentUpdate(nextProps) {\n    if (nextProps.color !== this.props.color) {\n      return true;\n    }\n\n    return false;\n  }\n\n  render() {\n    const divStyle = {\n      backgroundColor: this.props.color,\n      height: this.props.widthOfSquare + \"px\",\n      width: this.props.widthOfSquare + \"px\",\n      lineHeight: this.props.widthOfSquare + \"px\",\n    }\n    return (\n      <button\n        className=\"square\"\n        style={divStyle}\n        onClick={() => this.props.onClick()}>\n      </button>\n    );\n  }\n}","import React from 'react';\nimport Square from './Square';\n\nexport default class Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  floodFill(i, j) {\n    const oldColor = this.props.squares[i][j].color;\n    const newColor = this.getUniqueRandomColor(oldColor);\n    const squares = this.props.squares.slice();\n\n    this.getNextFloodFillState(squares, i, j, oldColor, newColor);\n    this.clearVisisted(squares);\n    this.setState({ squares: squares });\n  }\n\n  getUniqueRandomColor(color) {\n    const numberBetweenZeroAndFour = Math.floor((Math.random() * this.props.numberOfColors));\n    if (color === this.props.colors[numberBetweenZeroAndFour]) {\n      return this.getUniqueRandomColor(color);\n    } else {\n      return this.props.colors[numberBetweenZeroAndFour];\n    }\n  }\n\n  clearVisisted(squares) {\n    for (let i = 0; i < squares.length; i++) {\n      for (let j = 0; j < squares[i].length; j++) {\n        squares[i][j].visited = false;\n      }\n    }\n  }\n\n  getNextFloodFillState(squares, i, j, oldColor, newColor) {\n    // check out of bounds\n    if (i < 0 || i > this.props.squaresPerRow - 1) return;\n    if (j < 0 || j > this.props.squaresPerRow - 1) return;\n    // check if it's visited\n    if (squares[i][j].visited) return;\n    // Indicate node has been visited\n    squares[i][j].visited = true;\n    // check if it's same color\n    if (squares[i][j].color !== oldColor) return;\n    // set the current color to the new color and mark node as visited.\n    squares[i][j].color = newColor;\n    // recurse through up, down, left, right boxes.\n    this.getNextFloodFillState(squares, i + 1, j, oldColor, newColor);\n    this.getNextFloodFillState(squares, i - 1, j, oldColor, newColor);\n    this.getNextFloodFillState(squares, i, j + 1, oldColor, newColor);\n    this.getNextFloodFillState(squares, i, j - 1, oldColor, newColor);\n  }\n\n  renderSquare(i, j) {\n    return <Square\n      color={this.props.squares[i][j].color}\n      onClick={() => this.floodFill(i, j)}\n      widthOfSquare={this.props.widthOfSquare}\n      key={i + \",\" + j}\n    />;\n  }\n\n  createTable() {\n    let table = []\n    \n    for (let i = 0; i < this.props.squaresPerRow; i++) {\n      let children = []\n      //Inner loop to create children\n      for (let j = 0; j < this.props.squaresPerRow; j++) {\n        children.push(this.renderSquare(i, j))\n      }\n      //Create the parent and add the children\n      table.push(<div className=\"board-row\" key={i}>{children}</div>)\n    }\n    return table\n  }\n\n  render() {\n    return (\n      <div>\n        {this.createTable()}\n      </div>\n    );\n  }\n}","import React from 'react';\nimport Board from './Board';\n\nexport default class Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.state.widthOfSquare = 10;\n    this.state.squaresPerRow = 100;\n    this.state.numberOfColors = 2;\n\n    this.state.colors = this.generateColors();\n    this.state.squares = this.generateSquares();\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({[event.target.name]: event.target.value });\n  }\n\n  handleSubmit(event) {\n    const newState = {\n      squares: this.generateSquares(),\n      colors: this.generateColors()\n    }\n    this.setState(newState);\n    event.preventDefault();\n  }\n\n  generateColors() {\n    const colors = [];\n    for (let i = 0; i < this.state.numberOfColors; i++) {\n      colors[i] = '#' + (Math.random() * 0xFFFFFF << 0).toString(16);\n    }\n    return colors;\n  }\n\n  generateSquares() {\n    const squares = []\n    for(let i = 0; i < this.state.squaresPerRow; i++) {\n      squares[i] = [];\n      for(let j = 0; j < this.state.squaresPerRow; j++) {\n        squares[i][j] = {\n          color: this.getColor(),\n          visited: false\n        }\n      }\n    }\n    return squares;\n  }\n\n  getColor() {\n    const numberBetweenZeroAndFour = Math.floor((Math.random() * this.state.numberOfColors));\n    return this.state.colors[numberBetweenZeroAndFour];\n  }\n\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <form onSubmit={this.handleSubmit}>\n            <label>\n              Width of square:\n              <input type=\"number\" name=\"widthOfSquare\" value={this.state.widthOfSquare} onChange={this.handleChange} />\n            </label>\n            <br></br>\n            <label>\n              Squares per row:\n              <input type=\"number\" name=\"squaresPerRow\" value={this.state.squaresPerRow} onChange={this.handleChange} />\n            </label>\n            <br></br>\n            <label>\n              Number of colors:\n              <input type=\"number\" name=\"numberOfColors\" value={this.state.numberOfColors} onChange={this.handleChange} />\n            </label>\n            <br></br>\n            <input type=\"submit\" value=\"Reset\" /> (Work In Progress)\n          </form>\n          <p>\n            Instructions: Click on any square.<br></br>\n            <a href=\"https://github.com/ostralyan/flood-fill\" target=\"_blank\" rel=\"noopener noreferrer\">Written by Luke Xu.</a>\n          </p>\n          <Board \n            widthOfSquare={this.state.widthOfSquare}\n            squaresPerRow={this.state.squaresPerRow}\n            numberOfColors={this.state.numberOfColors}\n            squares={this.state.squares}\n            colors={this.state.colors}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport Game from './Game';\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}