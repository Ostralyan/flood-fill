{"version":3,"sources":["Square.jsx","Board.jsx","Game.jsx","index.js"],"names":["Square","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","divStyle","backgroundColor","color","height","widthOfSquare","width","lineHeight","react_default","a","createElement","className","style","onClick","React","Component","Board","i","j","oldColor","squares","newColor","getUniqueRandomColor","slice","getNextFloodFillState","clearVisisted","setState","numberBetweenZeroAndFour","Math","floor","random","numberOfColors","colors","length","visited","squaresPerRow","Square_Square","floodFill","key","table","children","push","renderSquare","createTable","Game","generateColors","generateSquares","handleChange","bind","assertThisInitialized","handleSubmit","event","defineProperty","target","name","value","newState","preventDefault","toString","getColor","onSubmit","type","onChange","href","rel","Board_Board","ReactDOM","render","Game_Game","document","getElementById"],"mappings":"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","file":"static/js/main.1456f52d.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Square extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const divStyle = {\n      backgroundColor: this.props.color,\n      height: this.props.widthOfSquare + \"px\",\n      width: this.props.widthOfSquare + \"px\",\n      lineHeight: this.props.widthOfSquare + \"px\",\n    }\n    return (\n      <button\n        className=\"square\"\n        style={divStyle}\n        onClick={() => this.props.onClick()}>\n      </button>\n    );\n  }\n}","import React from 'react';\nimport Square from './Square';\n\nexport default class Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  floodFill(i, j) {\n    const oldColor = this.props.squares[i][j].color;\n    const newColor = this.getUniqueRandomColor(oldColor);\n    const squares = this.props.squares.slice();\n\n    this.getNextFloodFillState(squares, i, j, oldColor, newColor);\n    this.clearVisisted(squares);\n    this.setState({ squares: squares });\n  }\n\n  getUniqueRandomColor(color) {\n    const numberBetweenZeroAndFour = Math.floor((Math.random() * this.props.numberOfColors));\n    if (color === this.props.colors[numberBetweenZeroAndFour]) {\n      return this.getUniqueRandomColor(color);\n    } else {\n      return this.props.colors[numberBetweenZeroAndFour];\n    }\n  }\n\n  clearVisisted(squares) {\n    for (let i = 0; i < squares.length; i++) {\n      for (let j = 0; j < squares[i].length; j++) {\n        squares[i][j].visited = false;\n      }\n    }\n  }\n\n  getNextFloodFillState(squares, i, j, oldColor, newColor) {\n    // check out of bounds\n    if (i < 0 || i > this.props.squaresPerRow - 1) return;\n    if (j < 0 || j > this.props.squaresPerRow - 1) return;\n    // check if it's visited\n    if (squares[i][j].visited) return;\n    // Indicate node has been visited\n    squares[i][j].visited = true;\n    // check if it's same color\n    if (squares[i][j].color !== oldColor) return;\n    // set the current color to the new color and mark node as visited.\n    squares[i][j].color = newColor;\n    // recurse through up, down, left, right boxes.\n    this.getNextFloodFillState(squares, i + 1, j, oldColor, newColor);\n    this.getNextFloodFillState(squares, i - 1, j, oldColor, newColor);\n    this.getNextFloodFillState(squares, i, j + 1, oldColor, newColor);\n    this.getNextFloodFillState(squares, i, j - 1, oldColor, newColor);\n  }\n\n  renderSquare(i, j) {\n    return <Square\n      color={this.props.squares[i][j].color}\n      onClick={() => this.floodFill(i, j)}\n      widthOfSquare={this.props.widthOfSquare}\n      key={i + \",\" + j}\n    />;\n  }\n\n  createTable() {\n    let table = []\n    \n    for (let i = 0; i < this.props.squaresPerRow; i++) {\n      let children = []\n      //Inner loop to create children\n      for (let j = 0; j < this.props.squaresPerRow; j++) {\n        children.push(this.renderSquare(i, j))\n      }\n      //Create the parent and add the children\n      table.push(<div className=\"board-row\" key={i}>{children}</div>)\n    }\n    return table\n  }\n\n  render() {\n    return (\n      <div>\n        {this.createTable()}\n      </div>\n    );\n  }\n}","import React from 'react';\nimport Board from './Board';\n\nexport default class Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.state.widthOfSquare = 10;\n    this.state.squaresPerRow = 100;\n    this.state.numberOfColors = 2;\n\n    this.state.colors = this.generateColors();\n    this.state.squares = this.generateSquares();\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({[event.target.name]: event.target.value });\n  }\n\n  handleSubmit(event) {\n    const newState = {\n      squares: this.generateSquares(),\n      colors: this.generateColors()\n    }\n    this.setState(newState);\n    event.preventDefault();\n  }\n\n  generateColors() {\n    const colors = [];\n    for (let i = 0; i < this.state.numberOfColors; i++) {\n      colors[i] = '#' + (Math.random() * 0xFFFFFF << 0).toString(16);\n    }\n    return colors;\n  }\n\n  generateSquares() {\n    const squares = []\n    for(let i = 0; i < this.state.squaresPerRow; i++) {\n      squares[i] = [];\n      for(let j = 0; j < this.state.squaresPerRow; j++) {\n        squares[i][j] = {\n          color: this.getColor(),\n          visited: false\n        }\n      }\n    }\n    return squares;\n  }\n\n  getColor() {\n    const numberBetweenZeroAndFour = Math.floor((Math.random() * this.state.numberOfColors));\n    return this.state.colors[numberBetweenZeroAndFour];\n  }\n\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <form onSubmit={this.handleSubmit}>\n            <label>\n              Width of square:\n              <input type=\"number\" name=\"widthOfSquare\" value={this.state.widthOfSquare} onChange={this.handleChange} />\n            </label>\n            <br></br>\n            <label>\n              Squares per row:\n              <input type=\"number\" name=\"squaresPerRow\" value={this.state.squaresPerRow} onChange={this.handleChange} />\n            </label>\n            <br></br>\n            <label>\n              Number of colors:\n              <input type=\"number\" name=\"numberOfColors\" value={this.state.numberOfColors} onChange={this.handleChange} />\n            </label>\n            <br></br>\n            <input type=\"submit\" value=\"Reset\" /> (Work In Progress)\n          </form>\n          <p>\n            Instructions: Click on any square.<br></br>\n            <a href=\"https://github.com/ostralyan/flood-fill\" target=\"_blank\" rel=\"noopener noreferrer\">Written by Luke Xu.</a>\n          </p>\n          <Board \n            widthOfSquare={this.state.widthOfSquare}\n            squaresPerRow={this.state.squaresPerRow}\n            numberOfColors={this.state.numberOfColors}\n            squares={this.state.squares}\n            colors={this.state.colors}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport Game from './Game';\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}